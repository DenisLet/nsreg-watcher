# Generated by Django 4.1.7 on 2023-08-08 20:36

import datetime
from django.db import migrations, models
import django.db.models.deletion


def populate_domain(apps, schema_editor):
    Domain = apps.get_model("catalog", "Domain")
    db_alias = schema_editor.connection.alias
    Domain.objects.using(db_alias).bulk_create([
        Domain(name="ru"),
        Domain(name="рф"),
    ])


def reverse_domain(apps, schema_editor):
    Domain = apps.get_model("catalog", "Domain")
    db_alias = schema_editor.connection.alias
    Domain.objects.using(db_alias).filter(name="ru").delete()
    Domain.objects.using(db_alias).filter(name="рф").delete()


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Domain',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'db_table': 'domain',
            },
        ),
        migrations.CreateModel(
            name='Parse_History',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(default=datetime.date.today)),
            ],
            options={
                'db_table': 'parse_history',
            },
        ),
        migrations.CreateModel(
            name='Registrator',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('note1', models.TextField()),
                ('note2', models.TextField()),
                ('city', models.CharField(max_length=255)),
                ('website', models.TextField()),
            ],
            options={
                'db_table': 'registrator',
            },
        ),
        migrations.CreateModel(
            name='Price',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('registration_price', models.DecimalField(blank=True, null=True)),
                ('prolongation_price', models.DecimalField(blank=True, null=True)),
                ('changing_price', models.DecimalField(blank=True, null=True)),
                ('id_domain', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='catalog.domain')),
                ('id_parse_history', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='catalog.parse_history')),
                ('id_registrator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='catalog.registrator')),
            ],
            options={
                'db_table': 'price',
            },
        ),
        migrations.CreateModel(
            name='Parser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contributor_name', models.CharField(max_length=255)),
                ('email', models.CharField(max_length=255)),
                ('comment', models.TextField(blank=True, null=True)),
                ('id_registrator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='catalog.registrator')),
            ],
            options={
                'db_table': 'parser',
            },
        ),
        migrations.CreateModel(
            name='Parse_Error',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField()),
                ('id_parse_history', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='catalog.parse_history')),
                ('id_parser', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='catalog.parser')),
            ],
            options={
                'db_table': 'parse_error',
            },
        ),
        migrations.RunPython(populate_domain, reverse_domain)
    ]
